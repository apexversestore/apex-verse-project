from flask import Flask, request, jsonify
from flask_cors import CORS
import json
import re
from typing import List, Dict
import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

# Mock –±–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ –ë–î)
PRODUCTS_DB = [
    {
        "id": 1,
        "name": {"de": "Schwarze Jeans", "en": "Black Jeans", "uk": "–ß–æ—Ä–Ω—ñ –¥–∂–∏–Ω—Å–∏", "ru": "–ß–µ—Ä–Ω—ã–µ –¥–∂–∏–Ω—Å—ã"},
        "category": "jeans",
        "colors": ["black", "schwarz", "—á–µ—Ä–Ω—ã–π", "—á–æ—Ä–Ω–∏–π"],
        "sizes": ["S", "M", "L", "XL", "XXL"],
        "description": {"de": "Perfekte schwarze Jeans f√ºr gro√üe Menschen",
                        "en": "Perfect black jeans for tall people"},
        "tags": ["tall", "hoch", "–≤—ã—Å–æ–∫–∏–π", "–≤–∏—Å–æ–∫–∏–π", "slim", "modern"],
        "price": 89.99,
        "image": "https://images.unsplash.com/photo-1542272604-787c3835535d?w=500",
        "collection": "APEX.ALPHA"
    },
    {
        "id": 2,
        "name": {"de": "Premium Hoodie", "en": "Premium Hoodie", "uk": "–ü—Ä–µ–º—ñ—É–º —Ö—É–¥—ñ", "ru": "–ü—Ä–µ–º–∏—É–º —Ö—É–¥–∏"},
        "category": "hoodie",
        "colors": ["gray", "grau", "—Å–µ—Ä—ã–π", "—Å—ñ—Ä–∏–π", "black", "white"],
        "sizes": ["XS", "S", "M", "L", "XL"],
        "description": {"de": "Komfortables Premium Hoodie", "en": "Comfortable premium hoodie"},
        "tags": ["comfort", "bequem", "—É–¥–æ–±–Ω—ã–π", "–∑—Ä—É—á–Ω–∏–π", "soft", "casual"],
        "price": 69.99,
        "image": "https://images.unsplash.com/photo-1556821840-3a63f95609a7?w=500",
        "collection": "APEX.BLISS"
    },
    {
        "id": 3,
        "name": {"de": "Elegantes Hemd", "en": "Elegant Shirt", "uk": "–ï–ª–µ–≥–∞–Ω—Ç–Ω–∞ —Å–æ—Ä–æ—á–∫–∞", "ru": "–≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è —Ä—É–±–∞—à–∫–∞"},
        "category": "shirt",
        "colors": ["white", "wei√ü", "–±–µ–ª—ã–π", "–±—ñ–ª–∏–π", "blue", "blau"],
        "sizes": ["S", "M", "L", "XL"],
        "description": {"de": "Business Hemd f√ºr jeden Anlass", "en": "Business shirt for any occasion"},
        "tags": ["business", "elegant", "formal", "–æ—Ñ–∏—Å", "office"],
        "price": 59.99,
        "image": "https://images.unsplash.com/photo-1596755094514-f87e34085b2c?w=500",
        "collection": "APEX.ZENITH"
    }
]


class ApexSphereAI:
    def __init__(self):
        self.products = PRODUCTS_DB

    def extract_keywords(self, query: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        query = query.lower()

        # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        query = re.sub(r'[^\w\s]', ' ', query)

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
        words = query.split()

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        stop_words = {'der', 'die', 'das', 'ein', 'eine', 'und', 'oder', 'f√ºr', 'mit', 'ich', 'bin', 'suche',
                      'the', 'a', 'an', 'and', 'or', 'for', 'with', 'i', 'am', 'looking', 'search',
                      '—è', '–∏—â—É', '–¥–ª—è', '—Å', '–∏', '–∏–ª–∏', '—â–æ', '—à—É–∫–∞—é'}

        keywords = [word for word in words if word not in stop_words and len(word) > 2]
        return keywords

    def calculate_match_score(self, product: Dict, keywords: List[str]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º"""
        score = 0.0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–≤–µ—Å 3.0)
        for lang_name in product["name"].values():
            for keyword in keywords:
                if keyword in lang_name.lower():
                    score += 3.0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–≤–µ—Å 2.5)
        if any(keyword in product["category"] for keyword in keywords):
            score += 2.5

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–∞ (–≤–µ—Å 2.0)
        for color in product["colors"]:
            if any(keyword in color for keyword in keywords):
                score += 2.0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏ (–≤–µ—Å 1.5)
        for tag in product["tags"]:
            if any(keyword in tag for keyword in keywords):
                score += 1.5

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–≤–µ—Å 1.0)
        for desc in product["description"].values():
            for keyword in keywords:
                if keyword in desc.lower():
                    score += 1.0

        return score

    def search_products(self, query: str, limit: int = 5) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        keywords = self.extract_keywords(query)

        if not keywords:
            return []

        # –í—ã—á–∏—Å–ª—è–µ–º score –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        scored_products = []
        for product in self.products:
            score = self.calculate_match_score(product, keywords)
            if score > 0:
                scored_products.append({
                    **product,
                    "match_score": score,
                    "match_keywords": keywords
                })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        scored_products.sort(key=lambda x: x["match_score"], reverse=True)
        return scored_products[:limit]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI
ai = ApexSphereAI()


@app.route('/', methods=['GET'])
def health():
    return jsonify({
        "service": "APEX.SPHERE AI",
        "version": "1.0.0",
        "status": "running"
    })


@app.route('/ai/search', methods=['POST'])
def ai_search():
    try:
        data = request.get_json()
        query = data.get('query', '')
        language = data.get('language', 'de')

        if not query:
            return jsonify({"error": "Query is required"}), 400

        # –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        results = ai.search_products(query)

        return jsonify({
            "query": query,
            "language": language,
            "results_count": len(results),
            "results": results,
            "suggestions": {
                "de": "Versuche spezifischere Begriffe wie 'schwarze Jeans f√ºr gro√üe Menschen'",
                "en": "Try more specific terms like 'black jeans for tall people'",
                "uk": "–°–ø—Ä–æ–±—É–π –±—ñ–ª—å—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏ —è–∫ '—á–æ—Ä–Ω—ñ –¥–∂–∏–Ω—Å–∏ –¥–ª—è –≤–∏—Å–æ–∫–∏—Ö'",
                "ru": "–ü–æ–ø—Ä–æ–±—É–π –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∫–∞–∫ '—á–µ—Ä–Ω—ã–µ –¥–∂–∏–Ω—Å—ã –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö'"
            }
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/ai/recommend', methods=['POST'])
def ai_recommend():
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        user_preferences = data.get('preferences', {})

        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = []
        for product in PRODUCTS_DB[:3]:  # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø 3
            recommendations.append({
                **product,
                "recommendation_reason": {
                    "de": f"Empfohlen basierend auf Ihren Pr√§ferenzen",
                    "en": f"Recommended based on your preferences",
                    "uk": f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –≤–ø–æ–¥–æ–±–∞–Ω—å",
                    "ru": f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"
                },
                "confidence": 85 + (product["id"] * 3)  # Mock confidence
            })

        return jsonify({
            "recommendations": recommendations,
            "total": len(recommendations)
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/ai/virtual-try', methods=['POST'])
def virtual_try():
    """Mock –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏"""
    try:
        data = request.get_json()
        product_id = data.get('product_id')
        user_photo = data.get('user_photo', '')  # base64 –∏–ª–∏ URL

        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return jsonify({
            "product_id": product_id,
            "try_on_result": {
                "success": True,
                "fit_score": 92,
                "preview_url": f"https://via.placeholder.com/400x600/3b82f6/white?text=Virtual+Try+Product+{product_id}",
                "recommendations": {
                    "size": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–∞–∑–º–µ—Ä M",
                    "fit": "–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –≤–∞—à–µ–π —Ñ–∏–≥—É—Ä–µ",
                    "style": "–≠—Ç–æ—Ç —Å—Ç–∏–ª—å –≤–∞–º –æ—á–µ–Ω—å –∏–¥–µ—Ç"
                }
            }
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5001))
    debug = os.environ.get('DEBUG', 'True').lower() == 'true'

    print(f"ü§ñ APEX.SPHERE AI starting on port {port}")
    print(f"üîç Available endpoints:")
    print(f"   POST /ai/search - AI-powered product search")
    print(f"   POST /ai/recommend - Personal recommendations")
    print(f"   POST /ai/virtual-try - Virtual try-on")

    app.run(host='0.0.0.0', port=port, debug=debug)